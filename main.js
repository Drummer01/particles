// Generated by CoffeeScript 1.9.0
var HEIGHT, Universe, Vec2, WIDTH, World, canvas, frameRate, _Object;

canvas = document.getElementById('world');

WIDTH = window.innerWidth;

HEIGHT = window.innerHeight;

frameRate = 0;

Vec2 = (function() {
  function Vec2(x, y) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
  }

  Vec2.prototype.add = function(vec) {
    var _ref, _ref1;
    this.x += (_ref = vec.x) != null ? _ref : 0;
    this.y += (_ref1 = vec.y) != null ? _ref1 : 0;
    return this;
  };

  Vec2.prototype.multiply = function(val) {
    this.x *= val;
    this.y *= val;
    return this;
  };

  Vec2.prototype.setAngle = function(angle) {
    var length;
    length = this.getLength();
    this.x = Math.cos(angle) * length;
    this.y = Math.sin(angle) * length;
    return this;
  };

  Vec2.prototype.getAngle = function() {
    return Math.atan2(this.y, this.x);
  };

  Vec2.prototype.setLength = function(length) {
    var angle;
    angle = this.getAngle();
    this.x = Math.cos(angle) * length;
    this.y = Math.sin(angle) * length;
    return this;
  };

  Vec2.prototype.getLength = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  };

  return Vec2;

})();

World = (function() {
  function World(_at_canvas) {
    this.canvas = _at_canvas;
    this.objects = [];
    this.WIDTH = this.canvas.width = WIDTH;
    this.HEIGHT = this.canvas.height = HEIGHT;
    this.world = this.canvas.getContext('2d');
    this.colisions = false;
    this.ticks = 0;
  }

  World.prototype.start = function() {
    return this.tick();
  };

  World.prototype.tick = function() {
    this.update();
    this.draw();
    return window.requestAnimationFrame(this.tick.bind(this));
  };

  World.prototype.draw = function() {
    var object, _i, _len, _ref, _results;
    this.world.clearRect(0, 0, this.WIDTH, this.HEIGHT);
    this.world.globalAlpha = 1;
    this.showFps();
    _ref = this.objects;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      _results.push(object.draw(this.world));
    }
    return _results;
  };

  World.prototype.update = function() {
    var i, j, mainObject, object, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    _ref = this.objects;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      mainObject = _ref[i];
      if (mainObject) {
        _ref1 = this.objects;
        for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
          object = _ref1[j];
          if (object) {
            if (object !== mainObject) {
              mainObject.gravitateTo(object);
              if (this.colisions) {
                if (mainObject.r + object.r >= mainObject.distanceTo(object)) {
                  if (mainObject.mass >= object.mass) {
                    mainObject.r += object.r * .7;
                    mainObject.mass += object.mass;
                    this.objects.splice(j, 1);
                  } else {
                    object.r += mainObject.r * .7;
                    object.mass += mainObject.mass;
                    this.objects.splice(i, 1);
                  }
                }
              }
            }
          }
        }
      }
    }
    _ref2 = this.objects;
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      object = _ref2[_k];
      _results.push(object.update());
    }
    return _results;
  };

  World.prototype.newObject = function(newObject) {
    this.objects.push(newObject);
    return this;
  };

  World.prototype.getFps = function() {
    var difference;
    if (!this.lastFpsCall) {
      this.lastFpsCall = Date.now();
      return 0;
    }
    difference = (new Date().getTime() - this.lastFpsCall) / 1000;
    this.lastFpsCall = Date.now();
    return Math.floor(1 / difference);
  };

  World.prototype.showFps = function() {
    var fps;
    fps = this.getFps();
    this.world.font = "30px Verdana";
    this.world.fillStyle = "#1BCC26";
    return this.world.fillText(fps + " FPS", WIDTH * .9, HEIGHT * .05);
  };

  return World;

})();

_Object = (function() {
  function _Object(params) {
    this.loc = new Vec2(params.x, params.y);
    this.vel = new Vec2(0, 0);
    this.vel.setLength(params.vel).setAngle(params.dir);
    this.r = params.r;
    this.mass = params.mass * 1000000;
    this.G = 6.67 * Math.pow(10, -11);
  }

  _Object.prototype.update = function() {
    return this.loc.add(this.vel);
  };

  _Object.prototype.draw = function(world) {
    if (this.loc.x - this.r > WIDTH) {
      this.loc.x = -this.r;
    }
    if (this.loc.x + this.r < 0) {
      this.loc.x = WIDTH + this.r;
    }
    if (this.loc.y - this.r > HEIGHT) {
      this.loc.y = -this.r;
    }
    if (this.loc.y + this.r < 0) {
      this.loc.y = HEIGHT + this.r;
    }
    world.beginPath();
    world.fillStyle = "#223";
    world.arc(this.loc.x, this.loc.y, this.r, 0, 2 * Math.PI);
    return world.fill();
  };

  _Object.prototype.angleTo = function(target) {
    return Math.atan2(target.loc.y - this.loc.y, target.loc.x - this.loc.x);
  };

  _Object.prototype.distanceTo = function(target) {
    var dx, dy;
    dx = target.loc.x - this.loc.x;
    dy = target.loc.y - this.loc.y;
    return Math.sqrt(dx * dx + dy * dy);
  };

  _Object.prototype.gravitateTo = function(target) {
    var a, distance, f, gravity;
    gravity = new Vec2;
    distance = this.distanceTo(target);
    if (distance > .9) {
      f = this.G * (this.mass * target.mass) / (distance * distance);
      a = (this.mass / f) / 4000000000;
    } else {
      a = 0;
    }
    gravity.setLength(a);
    gravity.setAngle(this.angleTo(target));
    return this.vel.add(gravity);
  };

  return _Object;

})();

Universe = new World(canvas);

window.addEventListener('click', function(e) {
  return Universe.newObject(new _Object({
    x: e.clientX,
    y: e.clientY,
    r: 5,
    vel: 0,
    dir: 0,
    mass: 1
  }));
});

Universe.start();
